package dev.jonpoulton.catalog.gradle.internal.writer

import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.Documentable
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import dev.jonpoulton.catalog.gradle.GenerateResourcesTask
import dev.jonpoulton.catalog.gradle.internal.ResourceEntry
import dev.jonpoulton.catalog.gradle.internal.ResourceType
import java.io.File

internal abstract class CatalogWriter<T : ResourceEntry> {
  protected abstract val config: GenerateResourcesTask.TaskConfig
  protected abstract val resourceType: ResourceType

  protected val receiverClass by lazy { ClassName(config.packageName, resourceType.receiverType) }
  protected val rClass by lazy { ClassName(config.packageName, "R") }

  protected val composableClass = ClassName("androidx.compose.runtime", "Composable")
  protected val readOnlyComposableClass = ClassName("androidx.compose.runtime", "ReadOnlyComposable")

  fun write(resources: List<T>, codegenDestination: File) {
    val className = "${config.typePrefix}${resourceType.receiverType}"
    val type = TypeSpec
      .objectBuilder(className)
      .addInternalIfConfigured()
      .writeResources(resources)
      .build()

    val fileSpec = FileSpec
      .builder(config.packageName, className)
      .addFileComment("DO NOT EDIT: Auto-generated by Catalog. https://github.com/jonapoul/catalog")
      .addType(type)
      .build()

    fileSpec.writeTo(codegenDestination)
  }

  @Suppress("TooGenericExceptionCaught")
  private fun TypeSpec.Builder.writeResources(resources: List<T>): TypeSpec.Builder {
    resources.forEach { resource ->
      try {
        addResource(resource)
      } catch (e: Exception) {
        throw IllegalStateException("Error writing resource \"${resource.name}\" in ${resource.file}", e)
      }
    }
    return this
  }

  abstract fun TypeSpec.Builder.addResource(resource: T): TypeSpec.Builder

  protected fun <T : Documentable.Builder<T>> Documentable.Builder<T>.addKdoc(item: ResourceEntry.XmlItem): T {
    item.docs?.let { addKdoc(it) }
    @Suppress("UNCHECKED_CAST")
    return this as T
  }

  protected fun <T> T.addInternalIfConfigured(): T {
    if (config.generateInternal) {
      when (this) {
        is FunSpec.Builder -> addModifiers(KModifier.INTERNAL)
        is PropertySpec.Builder -> addModifiers(KModifier.INTERNAL)
        is TypeSpec.Builder -> addModifiers(KModifier.INTERNAL)
      }
    }
    return this
  }
}
